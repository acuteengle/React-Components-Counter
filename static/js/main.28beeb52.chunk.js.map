{"version":3,"sources":["components/Counter.jsx","components/Counters.jsx","components/Navbar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Counter","counter","this","props","value","classes","onIncrement","onDelete","className","getBadgeClasses","formatCount","onClick","id","Component","Counters","renderCounters","counters","length","map","c","key","onReset","Navbar","totalCounters","href","App","state","filter","handleDelete","counterId","setState","handleReset","handleIncrement","index","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAwCeA,G,kLArCI,IACHC,EAAYC,KAAKC,MAAjBF,QACR,OAAyB,IAAlBA,EAAQG,MAAc,OAASH,EAAQG,Q,wCAG/B,IAEXC,EAAU,mBAEd,OADAA,GAA6B,IAFTH,KAAKC,MAAjBF,QAEWG,MAAc,UAAY,Y,+BAIvC,IAAD,EACsCF,KAAKC,MAAxCG,EADH,EACGA,YAAaC,EADhB,EACgBA,SAAUN,EAD1B,EAC0BA,QAE/B,OACI,6BACI,0BAAMO,UAAWN,KAAKO,mBACjBP,KAAKQ,eAEV,4BACIC,QAAS,kBAAML,EAAYL,IAC3BO,UAAU,4BAFd,aAMA,4BACIG,QAAS,kBAAMJ,EAASN,EAAQW,KAChCJ,UAAU,6BAFd,e,GA3BMK,cC6CPC,E,4MA3CXC,eAAiB,WAAO,IAAD,EACyB,EAAKZ,MAAzCa,EADW,EACXA,SAAUV,EADC,EACDA,YAAaC,EADZ,EACYA,SAE/B,OAAwB,IAApBS,EAASC,OAEL,6BACI,sDAKJ,6BACKD,EAASE,KAAI,SAACC,GACX,OACI,kBAAC,EAAD,CACIC,IAAKD,EAAEP,GACPX,QAASkB,EACTb,YAAaA,EACbC,SAAUA,S,uDAS5B,IACEc,EAAYnB,KAAKC,MAAjBkB,QACR,OACI,6BACI,4BACIV,QAASU,EACTb,UAAU,8BAFd,SAMCN,KAAKa,sB,GAtCCF,aCWRS,EAbA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACd,OACI,yBAAKf,UAAU,gCACX,uBAAGA,UAAU,eAAegB,KAAK,KAAjC,oBACsB,IAClB,0BAAMhB,UAAU,oCACXe,MC8CNE,E,4MA/CXC,MAAQ,CACJV,SAAU,CACN,CAAEJ,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,K,EAGxBmB,cAAgB,WACZ,OAAO,EAAKG,MAAMV,SAASW,QAAO,SAACR,GAAD,OAAOA,EAAEf,MAAQ,KAAGa,Q,EAG1DW,aAAe,SAACC,GACZ,IAAMb,EAAW,EAAKU,MAAMV,SAASW,QAAO,SAACR,GAAD,OAAOA,EAAEP,KAAOiB,KAC5D,EAAKC,SAAS,CAAEd,c,EAGpBe,YAAc,WACV,IAAMf,EAAW,EAAKU,MAAMV,SAASE,KAAI,SAACC,GAEtC,OADAA,EAAEf,MAAQ,EACHe,KAEX,EAAKW,SAAS,CAAEd,c,EAGpBgB,gBAAkB,SAAC/B,GACf,IAAMe,EAAQ,YAAO,EAAKU,MAAMV,UAC1BiB,EAAQjB,EAASkB,QAAQjC,GAC/Be,EAASiB,GAAS,EAAKP,MAAMV,SAASiB,GACtCjB,EAASiB,GAAO7B,QAChB,EAAK0B,SAAS,CAAEd,c,uDAGhB,OACI,yBAAKR,UAAU,OACX,kBAAC,EAAD,CAAQe,cAAerB,KAAKqB,kBAC5B,kBAAC,EAAD,CACIP,SAAUd,KAAKwB,MAAMV,SACrBV,YAAaJ,KAAK8B,gBAClBzB,SAAUL,KAAK0B,aACfP,QAASnB,KAAK6B,mB,GAzChBlB,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.28beeb52.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends Component {\n    formatCount() {\n        const { counter } = this.props;\n        return counter.value === 0 ? \"Zero\" : counter.value;\n    }\n\n    getBadgeClasses() {\n        const { counter } = this.props;\n        let classes = \"badge m-2 badge-\";\n        classes += counter.value === 0 ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    render() {\n        const { onIncrement, onDelete, counter } = this.props;\n\n        return (\n            <div>\n                <span className={this.getBadgeClasses()}>\n                    {this.formatCount()}\n                </span>\n                <button\n                    onClick={() => onIncrement(counter)}\n                    className=\"btn btn-secondary btn-sm\"\n                >\n                    Increment\n                </button>\n                <button\n                    onClick={() => onDelete(counter.id)}\n                    className=\"btn btn-danger btn-sm m-2\"\n                >\n                    Delete\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./Counter\";\n\nclass Counters extends Component {\n    renderCounters = () => {\n        const { counters, onIncrement, onDelete } = this.props;\n\n        if (counters.length === 0) {\n            return (\n                <div>\n                    <p>There are no counters!</p>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    {counters.map((c) => {\n                        return (\n                            <Counter\n                                key={c.id}\n                                counter={c}\n                                onIncrement={onIncrement}\n                                onDelete={onDelete}\n                            />\n                        );\n                    })}\n                </div>\n            );\n        }\n    };\n\n    render() {\n        const { onReset } = this.props;\n        return (\n            <div>\n                <button\n                    onClick={onReset}\n                    className=\"btn btn-primary btn-sm m-2\"\n                >\n                    Reset\n                </button>\n                {this.renderCounters()}\n            </div>\n        );\n    }\n}\n\nexport default Counters;\n","import React from \"react\";\nconst Navbar = ({ totalCounters }) => {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"/\">\n                Non-Zero Counters{\" \"}\n                <span className=\"badge badge-pill badge-secondary\">\n                    {totalCounters}\n                </span>\n            </a>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Counters from \"./components/Counters\";\nimport Navbar from \"./components/Navbar\";\n\nclass App extends Component {\n    state = {\n        counters: [\n            { id: 0, value: 0 },\n            { id: 1, value: 0 },\n            { id: 2, value: 0 },\n            { id: 3, value: 0 },\n        ],\n    };\n    totalCounters = () => {\n        return this.state.counters.filter((c) => c.value > 0).length;\n    };\n\n    handleDelete = (counterId) => {\n        const counters = this.state.counters.filter((c) => c.id !== counterId);\n        this.setState({ counters });\n    };\n\n    handleReset = () => {\n        const counters = this.state.counters.map((c) => {\n            c.value = 0;\n            return c;\n        });\n        this.setState({ counters });\n    };\n\n    handleIncrement = (counter) => {\n        const counters = [...this.state.counters];\n        const index = counters.indexOf(counter);\n        counters[index] = this.state.counters[index];\n        counters[index].value++;\n        this.setState({ counters });\n    };\n    render() {\n        return (\n            <div className=\"App\">\n                <Navbar totalCounters={this.totalCounters()} />\n                <Counters\n                    counters={this.state.counters}\n                    onIncrement={this.handleIncrement}\n                    onDelete={this.handleDelete}\n                    onReset={this.handleReset}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/*\n  https://react-bootstrap.github.io/getting-started/introduction/\n*/\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}